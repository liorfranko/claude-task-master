# Task ID: 109
# Title: Implement Manual Sync Commands
# Status: pending
# Dependencies: 105, 108
# Priority: medium
# Description: Create CLI commands for manual synchronization between local storage and Monday.com board.
# Details:
Add new CLI commands to `commands.js`:  
1. `update-monday-from-local`: Push local tasks to Monday.com  
2. `update-local-from-monday`: Pull Monday.com items to local tasks  
3. `sync status`: Show sync status and statistics  
4. `sync conflicts`: List sync conflicts  
5. `sync resolve`: Resolve specific conflicts  

Implementation details:  
```javascript
const persistenceManager = require('./modules/persistence-manager');
const mondayClient = require('./modules/monday-client');
const localProvider = persistenceManager.providers['local'];
const mondayProvider = persistenceManager.providers['monday'];

async function updateMondayFromLocal(args) {
  const dryRun = args['dry-run'] || false;
  const taskId = args['task-id'];
  const force = args['force'] || false;
  
  console.log('Pushing local tasks to Monday.com...');
  
  // Get local tasks
  const localTasks = await localProvider.getTasks();
  
  // Filter by task ID if specified
  const tasksToSync = taskId ? localTasks.filter(t => t.id === parseInt(taskId)) : localTasks;
  
  if (tasksToSync.length === 0) {
    console.log('No tasks to sync.');
    return;
  }
  
  console.log(`Found ${tasksToSync.length} tasks to sync${dryRun ? ' (DRY RUN)' : ''}`);
  
  // Get existing Monday items for conflict detection
  let mondayItems = [];
  try {
    mondayItems = await mondayProvider.getTasks();
  } catch (error) {
    console.error('Error fetching Monday items:', error.message);
    if (!force) {
      console.error('Use --force to continue anyway.');
      return;
    }
  }
  
  // Create a map of Monday items by ID for quick lookup
  const mondayItemsMap = {};
  mondayItems.forEach(item => {
    if (item.id) {
      mondayItemsMap[item.id] = item;
    }
  });
  
  // Process each task
  const results = {
    created: 0,
    updated: 0,
    failed: 0,
    skipped: 0
  };
  
  for (const task of tasksToSync) {
    try {
      // Check if task exists in Monday
      if (task.mondayItemId && mondayItemsMap[task.id]) {
        // Update existing item
        if (!dryRun) {
          await mondayProvider.updateTask(task.id, task);
        }
        console.log(`Updated task ${task.id} in Monday.com`);
        results.updated++;
      } else {
        // Create new item
        if (!dryRun) {
          const newTask = await mondayProvider.createTask(task);
          // Update local task with Monday item ID
          await localProvider.updateTask(task.id, {
            ...task,
            mondayItemId: newTask.mondayItemId,
            lastSyncedAt: new Date().toISOString(),
            syncStatus: 'synced'
          });
        }
        console.log(`Created task ${task.id} in Monday.com`);
        results.created++;
      }
    } catch (error) {
      console.error(`Error syncing task ${task.id}:`, error.message);
      results.failed++;
    }
  }
  
  console.log('\nSync results:');
  console.log(`- Created: ${results.created}`);
  console.log(`- Updated: ${results.updated}`);
  console.log(`- Failed: ${results.failed}`);
  console.log(`- Skipped: ${results.skipped}`);
}

// Implement other sync commands similarly
```

Register commands:  
```javascript
module.exports = {
  // Existing commands
  'update-monday-from-local': updateMondayFromLocal,
  'update-local-from-monday': updateLocalFromMonday,
  'sync': {
    'status': syncStatus,
    'conflicts': syncConflicts,
    'resolve': syncResolve
  }
};
```

# Test Strategy:
1. Test each sync command with mock providers  
2. Test with real Monday.com API using test board 9275265350  
3. Test dry-run mode to ensure no changes are made  
4. Test error handling with API failures  
5. Test conflict detection and reporting  
6. Test with various command line arguments  
7. Test performance with large task sets

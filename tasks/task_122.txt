# Task ID: 122
# Title: Create persistence manager abstraction layer
# Status: pending
# Dependencies: 121, 119
# Priority: high
# Description: Implement the persistence manager as an abstraction layer that handles task storage operations across different persistence modes (local, Monday, hybrid).
# Details:
1. Create `scripts/modules/persistence-manager.js` as the central abstraction for task storage
2. Implement provider pattern to support different storage backends
3. Create storage providers for each persistence mode:
   - LocalStorageProvider: Uses local file storage only
   - MondayStorageProvider: Uses Monday.com API only (with local cache)
   - HybridStorageProvider: Uses both systems with synchronization
4. Implement common interface for all storage operations
5. Add mode detection and provider selection based on configuration
6. Ensure all Task Master operations work through this abstraction

Implementation structure:
```javascript
const config = require('../config');
const LocalStorageEngine = require('./local-storage');
const mondayClient = require('./monday-client');

class PersistenceManager {
  constructor() {
    this.localStorage = new LocalStorageEngine();
    this.currentProvider = this._getProviderForCurrentMode();
  }

  _getProviderForCurrentMode() {
    const mode = config.getPersistenceMode() || 'local';
    
    switch (mode) {
      case 'monday':
        return new MondayStorageProvider(this.localStorage, mondayClient);
      case 'hybrid':
        return new HybridStorageProvider(this.localStorage, mondayClient);
      case 'local':
      default:
        return new LocalStorageProvider(this.localStorage);
    }
  }

  // Common interface methods
  async getTasks() {
    return this.currentProvider.getTasks();
  }

  async getTaskById(id) {
    return this.currentProvider.getTaskById(id);
  }

  async createTask(taskData) {
    return this.currentProvider.createTask(taskData);
  }

  async updateTask(id, taskData) {
    return this.currentProvider.updateTask(id, taskData);
  }

  async deleteTask(id) {
    return this.currentProvider.deleteTask(id);
  }

  // Mode-specific operations
  async switchMode(newMode) {
    // Handle mode switching
  }

  getCurrentMode() {
    return config.getPersistenceMode() || 'local';
  }
}

// Provider implementations
class LocalStorageProvider { /* ... */ }
class MondayStorageProvider { /* ... */ }
class HybridStorageProvider { /* ... */ }

module.exports = new PersistenceManager();
```

# Test Strategy:
1. Unit test the PersistenceManager with mocked providers
2. Test provider selection based on configuration
3. Verify all storage operations work through the abstraction
4. Test mode switching functionality
5. Integration test with actual storage backends
6. Verify that all Task Master operations work in each mode
7. Test error handling and recovery
8. Benchmark performance in different modes

# Task ID: 112
# Title: Implement Mode Migration Tools
# Status: pending
# Dependencies: 105, 108, 111
# Priority: medium
# Description: Create tools to migrate tasks between different persistence modes without data loss.
# Details:
Create migration tools that:  
1. Safely migrate tasks between different persistence modes  
2. Validate data before migration  
3. Support rollback in case of failure  
4. Handle dependency mapping between systems  
5. Provide progress reporting  

Implementation:  
```javascript
const persistenceManager = require('./modules/persistence-manager');

async function migrateMode(args) {
  const fromMode = args.from;
  const toMode = args.to;
  const dryRun = args['dry-run'] || false;
  
  if (!['local', 'monday', 'hybrid'].includes(fromMode) || 
      !['local', 'monday', 'hybrid'].includes(toMode)) {
    console.error('Invalid mode. Must be one of: local, monday, hybrid');
    return;
  }
  
  if (fromMode === toMode) {
    console.log(`Already in ${fromMode} mode. No migration needed.`);
    return;
  }
  
  console.log(`Migrating from ${fromMode} to ${toMode} mode${dryRun ? ' (DRY RUN)' : ''}...`);
  
  // Get source provider
  const sourceProvider = persistenceManager.providers[fromMode];
  if (!sourceProvider) {
    console.error(`Source provider for ${fromMode} mode not found.`);
    return;
  }
  
  // Get target provider
  const targetProvider = persistenceManager.providers[toMode];
  if (!targetProvider) {
    console.error(`Target provider for ${toMode} mode not found.`);
    return;
  }
  
  // Get tasks from source
  const tasks = await sourceProvider.getTasks();
  console.log(`Found ${tasks.length} tasks to migrate.`);
  
  if (tasks.length === 0) {
    console.log('No tasks to migrate.');
    return;
  }
  
  // Create backup
  const backupPath = await createBackup(fromMode);
  console.log(`Created backup at ${backupPath}`);
  
  // Track results
  const results = {
    migrated: 0,
    failed: 0,
    skipped: 0
  };
  
  // Migrate each task
  for (const task of tasks) {
    try {
      console.log(`Migrating task ${task.id}: ${task.title}...`);
      
      if (!dryRun) {
        // Special handling for different mode combinations
        if (fromMode === 'local' && toMode === 'monday') {
          // Local to Monday: Create in Monday
          const mondayTask = await targetProvider.createTask(task);
          results.migrated++;
        } else if (fromMode === 'monday' && toMode === 'local') {
          // Monday to Local: Create in Local without Monday ID
          const localTask = {
            ...task,
            mondayItemId: null,
            syncStatus: null,
            lastSyncedAt: null
          };
          await targetProvider.createTask(localTask);
          results.migrated++;
        } else if (fromMode === 'local' && toMode === 'hybrid') {
          // Local to Hybrid: Create in Monday and update local
          const hybridTask = await targetProvider.createTask(task);
          results.migrated++;
        } else if (fromMode === 'monday' && toMode === 'hybrid') {
          // Monday to Hybrid: Create in local with Monday ID
          const hybridTask = await targetProvider.createTask(task);
          results.migrated++;
        } else if (fromMode === 'hybrid') {
          // From Hybrid: Just create in target
          await targetProvider.createTask(task);
          results.migrated++;
        }
      } else {
        console.log(`Would migrate task ${task.id} (dry run)`);
        results.migrated++;
      }
    } catch (error) {
      console.error(`Error migrating task ${task.id}:`, error.message);
      results.failed++;
    }
  }
  
  // Update config if not dry run
  if (!dryRun) {
    const config = require('../config').getConfig();
    config.persistence = config.persistence || {};
    config.persistence.mode = toMode;
    require('../config').saveConfig(config);
    console.log(`Updated configuration to ${toMode} mode.`);
  }
  
  console.log('\nMigration results:');
  console.log(`- Migrated: ${results.migrated}`);
  console.log(`- Failed: ${results.failed}`);
  console.log(`- Skipped: ${results.skipped}`);
  
  if (results.failed > 0) {
    console.log(`\nSome tasks failed to migrate. Backup is available at ${backupPath}`);
  }
}

async function createBackup(mode) {
  const fs = require('fs').promises;
  const path = require('path');
  const provider = persistenceManager.providers[mode];
  const tasks = await provider.getTasks();
  
  const backupDir = path.join(process.cwd(), 'backups');
  await fs.mkdir(backupDir, { recursive: true });
  
  const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
  const backupPath = path.join(backupDir, `tasks-${mode}-${timestamp}.json`);
  
  await fs.writeFile(backupPath, JSON.stringify(tasks, null, 2));
  return backupPath;
}
```

Register command:  
```javascript
module.exports = {
  // Existing commands
  'migrate': migrateMode
};
```

# Test Strategy:
1. Test migration between all mode combinations  
2. Test with dry-run mode to ensure no changes are made  
3. Test backup and restore functionality  
4. Test error handling and rollback  
5. Test with real Monday.com API using test board 9275265350  
6. Test with large task sets  
7. Test edge cases like empty task lists or invalid configurations

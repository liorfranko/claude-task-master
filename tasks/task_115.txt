# Task ID: 115
# Title: Implement Periodic Sync for Hybrid Mode
# Status: pending
# Dependencies: 110, 111
# Priority: low
# Description: Create a periodic synchronization system for hybrid mode that automatically syncs tasks between local storage and Monday.com at configurable intervals.
# Details:
Enhance the hybrid storage provider with periodic sync that:  
1. Syncs at configurable intervals  
2. Respects rate limits  
3. Handles offline scenarios gracefully  
4. Provides sync status and progress  

Implementation:  
```javascript
// Enhance hybrid-storage.js with periodic sync

class HybridStorageProvider {
  constructor(config) {
    // Existing initialization
    
    // Periodic sync settings
    this.syncInterval = config.persistence?.mondayConfig?.syncSettings?.syncInterval || 300; // Default: 5 minutes
    this.syncTimer = null;
    this.isSyncing = false;
    this.lastSyncTime = null;
    this.lastSyncStatus = null;
    
    // Start periodic sync if enabled
    if (this.syncInterval > 0) {
      this.startPeriodicSync();
    }
  }
  
  startPeriodicSync() {
    if (this.syncTimer) {
      clearInterval(this.syncTimer);
    }
    
    this.syncTimer = setInterval(async () => {
      await this.performSync();
    }, this.syncInterval * 1000);
    
    console.log(`Periodic sync started with interval: ${this.syncInterval} seconds`);
  }
  
  stopPeriodicSync() {
    if (this.syncTimer) {
      clearInterval(this.syncTimer);
      this.syncTimer = null;
      console.log('Periodic sync stopped');
    }
  }
  
  async performSync() {
    if (this.isSyncing) {
      console.log('Sync already in progress, skipping');
      return;
    }
    
    this.isSyncing = true;
    console.log('Starting periodic sync...');
    
    try {
      const result = await this.syncEngine.syncAll();
      
      this.lastSyncTime = new Date();
      this.lastSyncStatus = {
        success: true,
        conflicts: result.conflicts.length,
        results: result.results
      };
      
      console.log(`Sync completed. ${result.conflicts.length} conflicts found.`);
    } catch (error) {
      console.error('Sync failed:', error.message);
      
      this.lastSyncTime = new Date();
      this.lastSyncStatus = {
        success: false,
        error: error.message
      };
    } finally {
      this.isSyncing = false;
    }
  }
  
  getSyncStatus() {
    return {
      mode: 'hybrid',
      isSyncing: this.isSyncing,
      lastSyncTime: this.lastSyncTime,
      lastSyncStatus: this.lastSyncStatus,
      syncInterval: this.syncInterval
    };
  }
  
  // Override CRUD methods to update sync timestamps
  async createTask(taskData) {
    const task = await super.createTask(taskData);
    
    // Trigger sync after create
    setTimeout(() => this.performSync(), 1000);
    
    return task;
  }
  
  async updateTask(id, taskData) {
    const task = await super.updateTask(id, taskData);
    
    // Trigger sync after update
    setTimeout(() => this.performSync(), 1000);
    
    return task;
  }
  
  async deleteTask(id) {
    const result = await super.deleteTask(id);
    
    // Trigger sync after delete
    setTimeout(() => this.performSync(), 1000);
    
    return result;
  }
}
```

Implement CLI command for sync status:  
```javascript
async function syncStatus(args) {
  const config = require('./config').getConfig();
  const mode = config.persistence?.mode || 'local';
  
  if (mode === 'hybrid') {
    const hybridProvider = persistenceManager.providers['hybrid'];
    const status = hybridProvider.getSyncStatus();
    
    console.log('Sync Status:');
    console.log(`- Mode: ${status.mode}`);
    console.log(`- Sync Interval: ${status.syncInterval} seconds`);
    console.log(`- Currently Syncing: ${status.isSyncing ? 'Yes' : 'No'}`);
    
    if (status.lastSyncTime) {
      console.log(`- Last Sync: ${status.lastSyncTime.toISOString()}`);
      console.log(`- Last Sync Status: ${status.lastSyncStatus.success ? 'Success' : 'Failed'}`);
      
      if (status.lastSyncStatus.success) {
        console.log(`- Conflicts: ${status.lastSyncStatus.conflicts}`);
        console.log('- Results:');
        console.log(`  * Local → Monday: ${status.lastSyncStatus.results.localToMonday.created} created, ${status.lastSyncStatus.results.localToMonday.updated} updated`);
        console.log(`  * Monday → Local: ${status.lastSyncStatus.results.mondayToLocal.created} created, ${status.lastSyncStatus.results.mondayToLocal.updated} updated`);
      } else {
        console.log(`- Error: ${status.lastSyncStatus.error}`);
      }
    } else {
      console.log('- No sync performed yet');
    }
  } else {
    console.log(`Current mode is '${mode}'. Automatic sync is only available in hybrid mode.`);
  }
}
```

# Test Strategy:
1. Test periodic sync with various intervals  
2. Test sync after CRUD operations  
3. Test offline behavior  
4. Test with real Monday.com API using test board 9275265350  
5. Test sync status reporting  
6. Test performance with large task sets  
7. Test resource usage during long-running sync

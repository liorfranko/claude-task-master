# Task ID: 106
# Title: Implement Monday.com API Client
# Status: pending
# Dependencies: None
# Priority: high
# Description: Create a lightweight GraphQL client for Monday.com API interactions that handles authentication, rate limiting, and core board operations.
# Details:
Create `scripts/modules/monday-client.js` that:  
1. Uses `graphql-request` v5.1.0 for API interactions  
2. Implements authentication with Personal Access Token  
3. Adds rate limiting (10 requests per second)  
4. Implements retry logic for failed requests  
5. Creates methods for board operations: `getBoard`, `getItems`, `createItem`, `updateItem`, `deleteItem`  
6. Adds error handling and logging  

Install dependencies:  
```bash
npm install graphql-request graphql p-throttle
```

Code structure:  
```javascript
const { GraphQLClient } = require('graphql-request');
const pThrottle = require('p-throttle');

class MondayClient {
  constructor(config) {
    this.apiToken = process.env.MONDAY_API_TOKEN || config.persistence?.mondayConfig?.apiToken;
    this.boardId = config.persistence?.mondayConfig?.boardId;
    
    // Initialize GraphQL client
    this.client = new GraphQLClient('https://api.monday.com/v2', {
      headers: {
        'Authorization': this.apiToken,
        'Content-Type': 'application/json'
      }
    });
    
    // Rate limiting: 10 requests per second
    this.throttle = pThrottle({
      limit: 10,
      interval: 1000
    });
    
    // Throttled request method
    this.request = this.throttle(async (query, variables) => {
      try {
        return await this.client.request(query, variables);
      } catch (error) {
        // Handle rate limiting errors with exponential backoff
        if (error.response?.status === 429) {
          const retryAfter = parseInt(error.response.headers['retry-after'] || '2');
          await new Promise(resolve => setTimeout(resolve, retryAfter * 1000));
          return this.client.request(query, variables);
        }
        throw error;
      }
    });
  }

  async testConnection() {
    const query = `query { me { name } }`;
    return this.request(query);
  }

  async getBoard(boardId = this.boardId) {
    const query = `
      query($boardId: [Int]) {
        boards(ids: $boardId) {
          id
          name
          columns {
            id
            title
            type
          }
        }
      }
    `;
    return this.request(query, { boardId: parseInt(boardId) });
  }

  // Implement other board operations
}

module.exports = new MondayClient(require('../config').getConfig());
```

# Test Strategy:
1. Unit tests with mocked API responses  
2. Test authentication with valid and invalid tokens  
3. Test rate limiting with rapid requests  
4. Test retry logic with simulated 429 responses  
5. Integration test with real Monday.com API using test board 9275265350  
6. Test all board operations: get, create, update, delete  
7. Test error handling with various API error scenarios

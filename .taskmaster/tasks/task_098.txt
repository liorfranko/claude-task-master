# Task ID: 98
# Title: Implement CLI Commands for Monday Sync
# Status: done
# Dependencies: 97
# Priority: medium
# Description: Add CLI commands to trigger Monday.com sync operations and view sync status.
# Details:
1. Add `sync-monday` command to CLI
2. Add `monday-status` command to show sync status
3. Implement progress indicators and error reporting

CLI command implementation:
```javascript
// Add to commands.js

const { syncPendingTasks, syncTaskById, syncAllTasks } = require('./scripts/modules/monday-sync');

// Command to sync tasks to Monday
function syncMondayCommand(args) {
  const taskId = args['task-id'];
  const dryRun = args['dry-run'] || false;
  const force = args['force'] || false;
  
  try {
    const config = loadConfig();
    
    if (!config.mondayIntegration || !config.mondayIntegration.boardId) {
      console.error('Error: Monday.com integration not configured. Run `task-master config monday` first.');
      return 1;
    }
    
    if (dryRun) {
      console.log('Dry run mode - no changes will be made to Monday.com');
      const tasks = loadTasks();
      if (taskId) {
        const task = tasks.find(t => t.id === parseInt(taskId));
        if (task) {
          console.log(`Would sync task ${task.id}: ${task.title}`);
        } else {
          console.error(`Task with ID ${taskId} not found`);
          return 1;
        }
      } else {
        const pendingTasks = force ? tasks : tasks.filter(task => task.syncStatus === 'pending');
        console.log(`Would sync ${pendingTasks.length} tasks`);
        pendingTasks.forEach(task => {
          console.log(`- Task ${task.id}: ${task.title}`);
        });
      }
      return 0;
    }
    
    // Perform actual sync
    if (taskId) {
      console.log(`Syncing task ${taskId} to Monday.com...`);
      syncTaskById(parseInt(taskId), config)
        .then(result => {
          if (result.success) {
            console.log(`Task ${taskId} synced successfully to Monday item ${result.mondayItemId}`);
          } else {
            console.error(`Error syncing task ${taskId}: ${result.error}`);
            return 1;
          }
        })
        .catch(err => {
          console.error(`Exception syncing task ${taskId}: ${err.message}`);
          return 1;
        });
    } else if (force) {
      console.log('Syncing all tasks to Monday.com...');
      syncAllTasks(config)
        .then(results => {
          console.log(`Sync completed: ${results.succeeded} succeeded, ${results.failed} failed`);
          if (results.failed > 0) {
            console.error('Some tasks failed to sync:');
            results.details.filter(d => !d.success).forEach(d => {
              console.error(`- Task ${d.taskId}: ${d.error}`);
            });
            return 1;
          }
        })
        .catch(err => {
          console.error(`Exception during sync: ${err.message}`);
          return 1;
        });
    } else {
      console.log('Syncing pending tasks to Monday.com...');
      syncPendingTasks(config)
        .then(results => {
          console.log(`Sync completed: ${results.succeeded} succeeded, ${results.failed} failed`);
          if (results.failed > 0) {
            console.error('Some tasks failed to sync:');
            results.details.filter(d => !d.success).forEach(d => {
              console.error(`- Task ${d.taskId}: ${d.error}`);
            });
            return 1;
          }
        })
        .catch(err => {
          console.error(`Exception during sync: ${err.message}`);
          return 1;
        });
    }
    
    return 0;
  } catch (error) {
    console.error(`Error syncing to Monday.com: ${error.message}`);
    return 1;
  }
}

// Command to show Monday sync status
function mondayStatusCommand(args) {
  try {
    const config = loadConfig();
    
    if (!config.mondayIntegration || !config.mondayIntegration.boardId) {
      console.error('Error: Monday.com integration not configured. Run `task-master config monday` first.');
      return 1;
    }
    
    const tasks = loadTasks();
    const syncedTasks = tasks.filter(t => t.mondayItemId);
    const pendingTasks = tasks.filter(t => t.syncStatus === 'pending');
    const errorTasks = tasks.filter(t => t.syncStatus === 'error');
    
    console.log('Monday.com Sync Status:');
    console.log(`Board ID: ${config.mondayIntegration.boardId}`);
    console.log(`Total tasks: ${tasks.length}`);
    console.log(`Synced tasks: ${syncedTasks.length}`);
    console.log(`Pending tasks: ${pendingTasks.length}`);
    console.log(`Failed tasks: ${errorTasks.length}`);
    
    if (errorTasks.length > 0) {
      console.log('\nTasks with sync errors:');
      errorTasks.forEach(task => {
        console.log(`- Task ${task.id}: ${task.title} - ${task.syncError || 'Unknown error'}`);
      });
    }
    
    if (pendingTasks.length > 0) {
      console.log('\nTasks pending sync:');
      pendingTasks.forEach(task => {
        console.log(`- Task ${task.id}: ${task.title}`);
      });
    }
    
    return 0;
  } catch (error) {
    console.error(`Error getting Monday.com status: ${error.message}`);
    return 1;
  }
}

// Register commands
registerCommand('sync-monday', syncMondayCommand);
registerCommand('monday-status', mondayStatusCommand);
```

# Test Strategy:
1. Create unit tests for CLI commands:
   - Test argument parsing
   - Test dry run mode
   - Test error handling
2. Create integration tests:
   - Test `task-master sync-monday` with real tasks
   - Test `task-master sync-monday --task-id=X`
   - Test `task-master sync-monday --dry-run`
   - Test `task-master monday-status`
3. Test error scenarios:
   - Test with unconfigured Monday integration
   - Test with invalid task ID
   - Test with API errors

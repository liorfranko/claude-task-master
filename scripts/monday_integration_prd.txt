# Monday.com API Integration PRD

<context>
# Overview  
This feature adds Monday.com board integration to Task Master, providing three different persistence modes for task storage. Users can choose between local-only storage (default), Monday.com-only storage, or hybrid mode where tasks are persisted in both systems and kept synchronized. This approach gives teams flexibility to work entirely locally, fully in Monday.com, or maintain tasks in both systems for maximum compatibility.

# Core Features  
- **Three Persistence Modes**: Local-only, Monday-only, and Hybrid storage options
- **Mode Configuration**: Simple configuration to set and switch between persistence modes
- **Monday API Client**: Lightweight client for Monday.com GraphQL API interactions
- **Hybrid Synchronization**: Automatic bidirectional sync when in hybrid mode
- **Task State Mapping**: Map Task Master task statuses to Monday board item statuses
- **Mode Migration**: Tools to migrate tasks between different persistence modes
- **Manual Sync Commands**: CLI commands to push local changes to Monday or pull Monday changes to local
- **Conflict Resolution**: Handle conflicts in hybrid mode when same task is modified in both systems

# User Experience  
- **Mode Selection**: Users choose persistence mode during setup or via configuration
- **Transparent Operations**: All Task Master commands work the same regardless of mode
- **Local-first Default**: System defaults to local-only mode for immediate usability
- **Seamless Switching**: Users can migrate between modes without losing data
- **Manual Sync Control**: Users can manually push local changes to Monday or pull Monday changes to local
- **Status Feedback**: Clear indicators show which mode is active and sync status
- **Conflict Alerts**: Users are notified of conflicts in hybrid mode with resolution options
</context>

<PRD>
# Technical Architecture  

## System Components
- **Persistence Manager** (`scripts/modules/persistence-manager.js`): Core abstraction layer for task storage
- **Monday API Client** (`scripts/modules/monday-client.js`): GraphQL client for Monday.com API
- **Local Storage Engine** (`scripts/modules/local-storage.js`): Enhanced local task management
- **Sync Engine** (`scripts/modules/monday-sync.js`): Bidirectional sync logic for hybrid mode
- **Configuration Manager**: Extensions to existing config system for persistence modes
- **CLI Commands**: New commands for mode management, migration, and manual sync
- **MCP Tools**: New MCP tools for Monday integration accessible via Cursor

## Persistence Modes

### Local Mode (Default)
- Tasks stored only in local `tasks.json` file
- No Monday.com API calls required
- Fastest performance, works offline
- Current Task Master behavior

### Monday Mode
- Tasks stored only in Monday.com board
- Local `tasks.json` acts as cache/proxy
- All operations go through Monday API
- Requires internet connection

### Hybrid Mode
- Tasks stored in both local `tasks.json` and Monday.com
- Automatic bidirectional synchronization
- Conflict detection and resolution
- Works offline with sync when connection available

## CLI Commands for Manual Sync

### Push Local to Monday
```bash
task-master sync push-to-monday [options]
# or
task-master update-monday-from-local [options]
```
- Pushes local task changes to Monday.com board
- Available in all modes (creates Monday items if in local mode)
- Options: `--task-id=X`, `--dry-run`, `--force`, `--resolve-conflicts=strategy`
- Shows progress and reports any conflicts or errors

### Pull Monday to Local
```bash
task-master sync pull-from-monday [options]
# or  
task-master update-local-from-monday [options]
```
- Pulls Monday.com board changes to local tasks
- Available in all modes (fetches from configured board)
- Options: `--task-id=X`, `--dry-run`, `--force`, `--resolve-conflicts=strategy`
- Shows progress and reports any conflicts or errors

### Sync Status and Conflicts
```bash
task-master sync status
task-master sync conflicts
task-master sync resolve --conflict-id=X --strategy=local|monday|manual
```

## Data Models
```json
{
  "persistence": {
    "mode": "local|monday|hybrid",
    "mondayConfig": {
      "boardId": "9275265350",
      "apiToken": "env:MONDAY_API_TOKEN",
      "columnMapping": {
        "status": "status_column_id", 
        "title": "name",
        "description": "notes",
        "priority": "priority_column_id"
      },
      "syncSettings": {
        "conflictResolution": "manual|local-wins|monday-wins",
        "syncInterval": 300,
        "syncSubtasks": false
      }
    }
  },
  "tasks": [
    {
      "id": 1,
      "title": "Task Title",
      "mondayItemId": "12345678",
      "lastSyncedAt": "2025-01-20T10:00:00Z",
      "syncStatus": "synced|pending|conflict|error",
      "lastModifiedLocal": "2025-01-20T10:00:00Z",
      "lastModifiedMonday": "2025-01-20T09:55:00Z"
    }
  ]
}
```

## APIs and Integrations
- **Monday.com GraphQL API**: Official Monday.com API for board operations
- **Authentication**: Personal Access Token stored in environment variables
- **Rate Limiting**: Respect Monday.com API rate limits (10 requests per second)
- **Error Handling**: Graceful degradation with offline mode support
- **Conflict Detection**: Compare timestamps and content hashes

## Infrastructure Requirements
- New dependency: `graphql-request` for Monday API calls
- Environment variable: `MONDAY_API_TOKEN`
- Extended `.taskmasterconfig` for persistence mode settings
- New test fixtures for Monday API mocking
- Backup/restore utilities for mode migration

# Development Roadmap  

## Phase 1: Foundation & Push-to-Monday
### 1.1 Monday API Client Setup
- Install `graphql-request` dependency
- Create `monday-client.js` with GraphQL operations
- Implement authentication with Personal Access Token
- Add basic error handling and rate limiting
- Add board structure queries and item CRUD operations
- **Deliverable**: Working Monday API client

### 1.2 Configuration & Basic Setup
- Extend `.taskmasterconfig` schema for Monday settings
- Add CLI commands for Monday configuration
- Implement Monday board accessibility validation
- Add environment variable support for `MONDAY_API_TOKEN`
- **Deliverable**: Basic Monday configuration system

### 1.3 Push-to-Monday Implementation
- Create `monday-sync.js` with one-way sync logic (local → Monday)
- Implement task-to-Monday-item mapping
- Add `task-master update-monday-from-local` command
- Add simple status mapping (pending→Not Started, done→Done)
- Add sync tracking fields to task schema (`mondayItemId`, `lastSyncedAt`)
- Support `--task-id=X`, `--dry-run`, `--force` options
- **Deliverable**: Working push-to-Monday functionality with CLI command

## Phase 2: Hybrid Mode with Auto-Push
### 2.1 Persistence Manager Architecture
- Create `persistence-manager.js` as abstraction layer
- Refactor existing task operations to use persistence manager
- Implement local storage engine as default provider
- Add hybrid storage provider that auto-pushes changes to Monday
- **Deliverable**: Abstracted task storage system with hybrid mode

### 2.2 Hybrid Auto-Sync Implementation
- Extend hybrid storage to automatically push all task changes to Monday
- Implement conflict detection using timestamps
- Add configuration for hybrid mode: `task-master config --set-mode=hybrid`
- Ensure all Task Master operations (add, update, delete) automatically sync to Monday
- Add sync status tracking and error handling for failed auto-pushes
- **Deliverable**: Hybrid mode where local changes automatically push to Monday

### 2.3 Conflict Detection and Basic Resolution
- Implement conflict detection when Monday items are modified externally
- Add `task-master sync status` and `task-master sync conflicts` commands
- Add basic conflict resolution strategies (local-wins, manual)
- Handle partial sync states and error recovery
- **Deliverable**: Conflict detection system for hybrid mode

## Phase 3: Pull-from-Monday Support
### 3.1 Monday-to-Local Sync Engine
- Implement Monday board reading and parsing
- Create Monday-to-Task conversion logic
- Add `task-master update-local-from-monday` command
- Support `--task-id=X`, `--dry-run`, `--force` options
- Handle creation of new local tasks from Monday items
- **Deliverable**: Working pull-from-Monday functionality

### 3.2 Bidirectional Conflict Resolution
- Enhance conflict detection for bidirectional sync
- Add conflict resolution strategies (monday-wins, manual merge)
- Implement `task-master sync resolve` command
- Add timestamp and content hash comparison
- Handle complex conflict scenarios (same task modified in both systems)
- **Deliverable**: Robust bidirectional conflict resolution

## Phase 4: Monday-Only Mode
### 4.1 Monday Storage Provider
- Create Monday storage provider for persistence manager
- Implement all task CRUD operations via Monday API exclusively
- Add local caching for performance and offline capability
- Handle Monday-specific field mapping and constraints
- **Deliverable**: Monday-only persistence mode

### 4.2 Mode Migration Tools
- Add `task-master migrate --from=local --to=monday` command
- Add `task-master migrate --from=hybrid --to=monday` command
- Add `task-master migrate --from=monday --to=local` command
- Implement data export/import between all modes
- Add validation and rollback capabilities
- Handle dependency mapping between systems
- **Deliverable**: Migration tools between all persistence modes

### 4.3 MCP Tools & Final Integration
- Create MCP tools: `push-to-monday`, `pull-from-monday`, `sync-tasks`
- Add MCP tools: `resolve-conflicts`, `switch-mode`, `migrate-mode`
- Add progress indicators and detailed error reporting
- Implement dry-run capabilities for testing
- Add comprehensive documentation and examples
- **Deliverable**: Complete MCP interface for all modes and operations

# Logical Dependency Chain

## Foundation Dependencies
1. **Monday API Client** → Required for all Monday operations
2. **Push-to-Monday** → Foundation for all sync operations
3. **Persistence Manager** → Required for hybrid and Monday-only modes

## Implementation Dependencies
1. Install dependencies → Build Monday API client → Test connectivity with board 9275265350
2. Add Monday configuration → Implement push-to-Monday → Test one-way sync
3. Create persistence manager → Implement hybrid auto-push mode → Test automatic syncing
4. Add conflict detection → Implement pull-from-Monday → Test bidirectional sync
5. Create Monday storage provider → Add migration tools → Test Monday-only mode
6. Add MCP tools → Integration testing → Documentation
7. Manual testing with board 9275265350 → Automated testing → Final validation

## Testing Dependencies
- Unit tests for Monday API client before any sync operations
- Integration tests for push-to-Monday with real Monday board
- Hybrid mode testing with auto-sync verification
- Pull-from-Monday testing with conflict scenarios
- Monday-only mode testing with all Task Master operations
- Migration testing between all modes
- MCP tools testing through Cursor
- Each step must be tested with the specified board ID: 9275265350

# Risks and Mitigations  

## Technical Challenges
- **Data Consistency**: Implement robust conflict detection and resolution
- **API Reliability**: Handle Monday API failures gracefully with offline fallback
- **Performance**: Cache Monday data locally to avoid excessive API calls
- **Data Migration**: Ensure safe migration between modes without data loss

## Mode-Specific Risks
- **Monday Mode**: Requires internet connection, potential for vendor lock-in
- **Hybrid Mode**: Complex conflict resolution, potential for sync loops
- **Local Mode**: No backup unless explicitly configured
- **Mode Switching**: Risk of data corruption during migration

## Resource Constraints
- **API Costs**: Monday.com free tier limits, monitor usage carefully
- **Development Complexity**: Three modes increase testing and maintenance overhead
- **User Confusion**: Clear documentation needed for mode selection
- **Backward Compatibility**: Ensure existing Task Master installations work unchanged

# Implementation Steps with Testing

## Step 1: Monday API Client Foundation
```bash
# Install dependency
npm install graphql-request

# Test connectivity
node -e "require('./scripts/modules/monday-client.js').testConnection()"

# Test with board 9275265350
```

## Step 2: Monday Configuration Setup
```bash
# Test Monday configuration
task-master config --monday-board=9275265350 --monday-token=$MONDAY_API_TOKEN

# Verify configuration
task-master config --show
```

## Step 3: Push-to-Monday Implementation
```bash
# Test push-to-Monday functionality
task-master add-task --prompt="Test local task for Monday sync"
task-master update-monday-from-local --dry-run
task-master update-monday-from-local

# Verify task appears on Monday board 9275265350
# Test specific task sync
task-master update-monday-from-local --task-id=1 --dry-run
```

## Step 4: Hybrid Mode with Auto-Push
```bash
# Test hybrid mode configuration
task-master config --set-mode=hybrid

# Test automatic sync on task operations
task-master add-task --prompt="Auto-sync test task"
# Verify task automatically appears on Monday board

task-master set-status --id=1 --status=done
# Verify status change automatically syncs to Monday

# Test conflict detection
task-master sync status
task-master sync conflicts
```

## Step 5: Pull-from-Monday Support
```bash
# Test pull-from-Monday functionality
task-master update-local-from-monday --dry-run
task-master update-local-from-monday

# Test specific item pull
task-master update-local-from-monday --task-id=1 --dry-run

# Test conflict resolution
task-master sync resolve --conflict-id=1 --strategy=local
```

## Step 6: Monday-Only Mode
```bash
# Test Monday-only mode
task-master config --set-mode=monday

# Test all Task Master operations in Monday mode
task-master add-task --prompt="Monday-only task"
task-master list
task-master set-status --id=1 --status=done
# Verify all operations work through Monday API
```

## Step 7: Migration Between Modes
```bash
# Test migration tools
task-master migrate --from=local --to=hybrid --dry-run
task-master migrate --from=hybrid --to=monday --dry-run
task-master migrate --from=monday --to=local --dry-run

# Execute actual migrations
task-master migrate --from=local --to=hybrid
# Verify all tasks migrated correctly
```

## Step 8: MCP Integration Testing
- Test all MCP tools via Cursor
- Verify push-to-monday MCP tool
- Verify sync-tasks MCP tool
- Verify switch-mode MCP tool
- Test conflict resolution through MCP interface

# Appendix  

## Monday.com API Reference
- **GraphQL Endpoint**: `https://api.monday.com/v2`
- **Authentication**: Bearer token in Authorization header
- **Rate Limits**: 10 requests per second
- **Board ID**: 9275265350 (for testing)

## Persistence Mode Comparison

| Feature | Local Mode | Monday Mode | Hybrid Mode |
|---------|------------|-------------|-------------|
| Storage Location | Local files only | Monday.com only | Both systems |
| Internet Required | No | Yes | Optional |
| Performance | Fastest | Moderate | Fast (cached) |
| Collaboration | None | Full | Full |
| Offline Support | Full | None | Read-only |
| Backup/Recovery | Manual | Monday handles | Both systems |
| Conflict Resolution | N/A | N/A | Required |
| Manual Sync Available | Yes (push only) | Yes (pull only) | Yes (both ways) |

## CLI Commands Reference

### Core Mode Commands
```bash
task-master config --set-mode=local|monday|hybrid
task-master config --show
task-master migrate --from=MODE --to=MODE [--dry-run]
```

### Manual Sync Commands
```bash
# Push local changes to Monday
task-master update-monday-from-local [--task-id=X] [--dry-run] [--force]

# Pull Monday changes to local  
task-master update-local-from-monday [--task-id=X] [--dry-run] [--force]

# Check sync status and conflicts
task-master sync status
task-master sync conflicts
task-master sync resolve --conflict-id=X --strategy=local|monday|manual
```

### Mode-Specific Behavior
- **Local Mode**: `update-monday-from-local` creates new Monday items, `update-local-from-monday` fetches from configured board
- **Monday Mode**: `update-local-from-monday` updates local cache, `update-monday-from-local` unnecessary but allowed
- **Hybrid Mode**: Both commands perform conflict-aware synchronization

## Sample GraphQL Queries
```graphql
# Get board info
query {
  boards(ids: [9275265350]) {
    id
    name
    columns {
      id
      title
      type
    }
  }
}

# Create item
mutation {
  create_item(board_id: 9275265350, item_name: "Task Name") {
    id
    name
  }
}

# Update item
mutation {
  change_simple_column_value(
    board_id: 9275265350, 
    item_id: "item_id", 
    column_id: "status", 
    value: "Done"
  ) {
    id
  }
}
```

## Task Master Integration Points
- **Config**: Extend `.taskmasterconfig` with persistence mode section
- **Tasks**: Add Monday-specific fields for tracking and sync
- **CLI**: Add mode management and sync commands to `commands.js`
- **MCP**: Add tools to `mcp-server/src/tools/`
- **Tests**: Add comprehensive testing for all three modes and sync commands

## Success Criteria
- All three persistence modes work correctly
- Tasks can be migrated between modes without data loss
- Manual sync commands work reliably: `update-monday-from-local` and `update-local-from-monday`
- Hybrid mode properly handles conflicts
- All existing Task Master functionality works in each mode
- CLI commands work: `task-master config --set-mode=X`
- Sync status and conflict detection systems are operational
- MCP tools work through Cursor for all modes
- Integration tests pass with real Monday API
- Performance is acceptable in all modes

## Phase 1 Completion Requirements
1. Persistence manager abstraction is implemented and tested
2. Monday API client successfully connects to board 9275265350
3. Configuration system supports all three modes
4. Local mode works exactly as current Task Master (backward compatibility)
5. Monday mode can create, read, update, and delete tasks via API
6. Manual sync commands `update-monday-from-local` and `update-local-from-monday` work reliably
7. Mode switching works without data corruption
8. All existing Task Master commands work in all modes
9. Basic migration tools between local and Monday modes function
10. Sync status and conflict detection systems are operational
11. Comprehensive tests pass for all modes and sync commands
12. Error handling works for common failure scenarios in each mode
</PRD> 